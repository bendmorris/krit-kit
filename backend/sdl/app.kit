import kit.sys.utils;

struct App {
    public var title: CString;
    public var engine: Engine;
    public var window: Window;
    public var renderer: Renderer;

    var running: Bool;

    public function init(options: Ptr[KritOptions]) {
        this.window = Window.new(options.title, options.width, options.height);
        this.engine = Engine.new(options.fps, options.fixedFrameRate);
        this.renderer = Renderer.new();
        this.running = false;
    }

    public function run() {
        this.running = true;
        var frameStart = 0;
        var frameDelta: Double = 1_f64 / this.engine.fps;
        var update = struct UpdateContext {
            engine: this.engine,
            window: this.window,
        };
        var render = struct RenderContext {
            window: this.window,
            renderer: this.renderer,
            renderSystem: this.renderer.renderSystem,
        };
        while this.running {
            update.scene = this.engine.scene;
            frameStart = time();
            this.handleEvents(update);
            this.engine.update(update);
            this.engine.render(render);
            do {
                update.elapsed = time() - frameStart;
            } while update.elapsed < frameDelta;
            // printf("%.4f FPS\n", 1_f64 / update.elapsed);
        }
    }

    public function destroy() {
        this.window.destroy();
    }

    function handleEvents(context: Ptr[UpdateContext]) {
        var event: SDL_Event;
        while SDL_PollEvent(event) != 0 {
            if event.type == ${SDL_QUIT: Uint} {
                this.running = false;
            } else if event.type == ${SDL_WINDOWEVENT: Uint} {
                if event.window.event == ${SDL_WINDOWEVENT_SIZE_CHANGED: Uint} {
                    // resize
                    var w = event.window.data1;
                    var h = event.window.data2;
                    this.window.onResize(w, h);
                }
            } else if event.type == ${SDL_KEYDOWN: Uint} {
                context.engine.input.key.registerDown(event.key.keysym.sym as Uint8);
                context.scene.input.key.registerDown(event.key.keysym.sym as Uint8);
            } else if event.type == ${SDL_KEYUP: Uint} {
                context.engine.input.key.registerUp(event.key.keysym.sym as Uint8);
                context.scene.input.key.registerUp(event.key.keysym.sym as Uint8);
            } else if event.type == ${SDL_MOUSEBUTTONDOWN: Uint} {
                context.engine.input.mouse.registerDown(Self.sdlMouseButton(event.button.button));
                context.scene.input.mouse.registerDown(Self.sdlMouseButton(event.button.button));
            } else if event.type == ${SDL_MOUSEBUTTONUP: Uint} {
                context.engine.input.mouse.registerUp(Self.sdlMouseButton(event.button.button));
                context.scene.input.mouse.registerUp(Self.sdlMouseButton(event.button.button));
            } else if event.type == ${SDL_MOUSEMOTION: Uint} {
                context.engine.input.mouse.registerPos(event.motion.x, event.motion.y);
                context.scene.input.mouse.registerPos(event.motion.x, event.motion.y);
            } else if event.type == ${SDL_WINDOWEVENT_ENTER: Uint} {
                context.engine.input.mouse.registerOver(true);
            } else if event.type == ${SDL_WINDOWEVENT_LEAVE: Uint} {
                context.engine.input.mouse.registerOver(false);
            }
        }
    }

    static function sdlMouseButton(b: Uint8): Mouse {
        match b {
            (SDL_BUTTON_LEFT) => return Mouse.MouseLeftButton;
            (SDL_BUTTON_MIDDLE) => return Mouse.MouseMiddleButton;
            (SDL_BUTTON_RIGHT) => return Mouse.MouseRightButton;
        }
    }
}

import kit.sys.utils;

struct App {
    public var title: CString;
    public var engine: Engine;
    public var window: Window;
    public var renderer: Renderer;

    var running: Bool;

    public function init(options: Ptr[KritOptions]) {
        this.window = Window.new(options.title, options.width, options.height);
        this.engine = Engine.new(options.fps, options.fixedFrameRate);
        this.renderer = Renderer.new();
        this.running = false;
    }

    public function run() {
        this.running = true;
        var frameStart = 0;
        var frameDelta: Double = 1 / this.engine.fps;
        var elapsed: Double = 0;
        var context = struct RenderContext {
            window: this.window,
            renderer: this.renderer,
            batch: this.renderer.batch,
        };
        while this.running {
            frameStart = time();
            this.handleEvents();
            this.engine.update(elapsed);
            this.engine.render(context);
            while elapsed < frameDelta {
                elapsed = time() - frameStart;
            }
        }
    }

    public function destroy() {
        this.window.destroy();
    }

    function handleEvents() {
        var event: SDL_Event;
        while SDL_PollEvent(event) != 0 {
            if event.type == ${SDL_QUIT: Uint} {
                this.running = false;
            } else if event.type == ${SDL_WINDOWEVENT: Uint} {
                if event.window.event == ${SDL_WINDOWEVENT_SIZE_CHANGED: Uint} {
                    // resize
                    var w = event.window.data1;
                    var h = event.window.data2;
                    this.window.onResize(w, h);
                }
            }
        }
    }
}

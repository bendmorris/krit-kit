struct WindowData {
    public var window: Ptr[SDL_Window];
    public var surface: Ptr[SDL_Surface];
    public var glContext: Ptr[SDL_GLContext];

    public static function new(parent: Ptr[Window], title: CString, width: Int, height: Int): Self {
        // SDL
        if SDL_Init(SDL_INIT_VIDEO) < 0 {
            panic(SDL_GetError());
        }

        // SDL_GL
        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
        SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE as Int);
        SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
        SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
        SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
        SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 0);
        SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
        SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, GL_TRUE);
        SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);

        // SDL_Image
        IMG_Init(${IMG_INIT_PNG: Int});

        var window = SDL_CreateWindow(
            title,
            ${SDL_WINDOWPOS_UNDEFINED: Int},
            ${SDL_WINDOWPOS_UNDEFINED: Int},
            width, height,
            SDL_WINDOW_SHOWN as Int | SDL_WINDOW_OPENGL as Int | SDL_WINDOW_RESIZABLE as Int
        );
        if window == null {
            panic(SDL_GetError());
        }

        var glContext = SDL_GL_CreateContext(window);
        if glContext == null {
            panic(SDL_GetError());
        }
        var surface = SDL_GetWindowSurface(window);

        SDL_GL_MakeCurrent(window, glContext);

        SDL_GL_SetSwapInterval(1);

        glEnable(GL_BLEND);
        glEnable(GL_MULTISAMPLE);

        var w = struct Self {window, glContext, surface};
        w.getSize(parent.dimensions.width, parent.dimensions.height);
        return w;
    }

    public function getSize(w: Ptr[Int], h: Ptr[Int]) {
        SDL_GetWindowSize(this.window, w, h);
    }

    public function destroy() {
        SDL_DestroyWindow(this.window);
    }
}

struct Engine {
    public var paused: Bool = false;
    public var fps: Int;
    public var fixedFrameRate: Bool;

    public var onUpdate: UpdateSignal = null;
    public var postUpdate: UpdateSignal = null;

    public var onRender: RenderSignal = null;
    public var postRender: RenderSignal = null;

    // global context
    public var input: InputContext = struct InputContext;
    public var asset: AssetContext = struct AssetContext;

    public var bgColor: Color = Color.Black;
    public var bgAlpha: Float = 1;
    public var camera: Camera = struct Camera;

    public var root: Box[Entity];
    public var userData: Ptr[Void] = null;

    public function update(context: Ptr[UpdateContext]) using implicit context {
        if this.paused {
            return;
        }
        context.asset = this.asset;
        context.camera = this.camera;
        context.input = this.input;
        this.onUpdate.invoke();
        this.camera.update();
        this.input.update();
        this.root.update();
        this.postUpdate.invoke();
    }

    public function render(context: Ptr[RenderContext]) using implicit context {
        context.camera = this.camera;
        var renderer = context.renderer;
        renderer.startFrame();

        this.onRender.invoke();
        renderer.flushBatch();

        if this.bgAlpha > 0 {
            var key = struct DrawKey;
            context.renderSystem.addRect(key,
                struct Rectangle[Int] {
                    point: struct Point[Int],
                    dimensions: struct Dimensions[Int] {x: context.window.width, y: context.window.height},
                },
                struct Matrix,
                this.bgColor.withAlpha(this.bgAlpha), false
            );
        }
        context.camera = this.camera;
        this.root.render();
        renderer.flushBatch();

        this.postRender.invoke();
        renderer.flushBatch();
        renderer.flushFrame();
    }
}

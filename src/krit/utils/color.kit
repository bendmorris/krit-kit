#[promote] abstract Color: Uint32 {
    public static var Black: Color = 0x000000;
    public static var White: Color = 0xffffff;

    public static function fromRgb(r: Float, g: Float, b: Float): Color {
        return
            (((r * 0xff) as Uint & 0xff) << 16) |
            (((g * 0xff) as Uint & 0xff) << 8) |
            ((b * 0xff) as Uint & 0xff);
    }

    public function getRed(): Float {
        return (((this & 0xff0000) >> 16) & 0xff) / 0xff_f32;
    }

    public function getGreen(): Float {
        return (((this & 0xff00) >> 8) & 0xff) / 0xff_f32;
    }

    public function getBlue(): Float {
        return (this & 0xff) / 0xff_f32;
    }

    public function withAlpha(a: Float): ColorWithAlpha {
        return ((((0xff_f32 * a) as Uint32 & 0xff) << 24) | this) as ColorWithAlpha;
    }

    public function lerp(other: Color, mix: Float): Color {
        if mix <= 0 {
            return this;
        } else if mix >= 1 {
            return other;
        } else {
            var rm = 1 - mix;
            return Color.fromRgb(
                this.getRed() * rm + other.getRed() * mix,
                this.getGreen() * rm + other.getGreen() * mix,
                this.getBlue() * rm + other.getBlue() * mix
            );
        }
    }

    public function multiply(other: Color): Color {
        return Color.fromRgb(this.getRed() * other.getRed(), this.getGreen() * other.getGreen(), this.getBlue() * other.getBlue());
    }
}

abstract ColorWithAlpha: Color {
    public static function fromRgba(r: Float, g: Float, b: Float, a: Float): ColorWithAlpha {
        return
            (((a * 0xff) as Uint & 0xff) << 24) |
            (((r * 0xff) as Uint & 0xff) << 16) |
            (((g * 0xff) as Uint & 0xff) << 8) |
            ((b * 0xff) as Uint & 0xff);
    }

    public function getAlpha(): Float {
        return (((this & 0xff000000) >> 24) & 0xff) / 0xff_f32;
    }

    public function premultiplyAlpha(): ColorWithPremultipliedAlpha {
        var a = this.getAlpha();
        return Self.fromRgba(this.getRed() * a, this.getGreen() * a, this.getBlue() * a, a) as ColorWithPremultipliedAlpha;
    }

    public function multiply(other: ColorWithAlpha): ColorWithAlpha {
        return ColorWithAlpha.fromRgba(this.getRed() * other.getRed(), this.getGreen() * other.getGreen(), this.getBlue() * other.getBlue(), this.getAlpha() * other.getAlpha());
    }
}

abstract ColorWithPremultipliedAlpha: ColorWithAlpha;

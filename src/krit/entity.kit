struct Entity {
    public var active: Bool = true;
    public var visible: Bool = true;
    public var position: Point = struct Point;
    public var graphic: Option[Box[Graphic]] = None;
    // public var mask: Box[Mask];

    public var onUpdate: Signal2[Ptr[Self], Ptr[UpdateContext]] = null;
    public var postUpdate: Signal2[Ptr[Self], Ptr[UpdateContext]] = null;
    public var onRender: Signal2[Ptr[Self], Ptr[RenderContext]] = null;
    public var postRender: Signal2[Ptr[Self], Ptr[RenderContext]] = null;
    public var onAdd: Signal = null;
    public var onRemove: Signal = null;

    public var scene: Ptr[Scene] = null;
    public var userData: Ptr[Void] = null;

    public function update(context: Ptr[UpdateContext]) {
        this.onUpdate.invoke(this, context);
        match this.graphic {
            Some(graphic) => graphic.update(context);
        }
        this.postUpdate.invoke(this, context);
    }

    public function render(context: Ptr[RenderContext]) {
        this.onRender.invoke(this, context);
        var childContext = context.copy();
        match this.graphic {
            Some(graphic) => {
                childContext.offset = this.position;
                graphic.render(childContext);
            }
        }
        this.postRender.invoke(this, context);
    }

    public function setGraphic(graphic: Box[Graphic]) {
        this.graphic = Some(graphic);
    }
}

import kit.math;

struct Point[T: Numeric = Float] {
    public var x: T = 0;
    public var y: T = 0;

    rules {
        ($this.length) => sqrt(this.x * this.x + this.y * this.y);
        ($this * ($i: T)) => $this.scale($i);
        ($this / ($i: T)) => $this.scale(1 / $i);

        ($this += $other) => $this.add($other);
        ($this -= $other) => $this.subtract($other);
        ($this + $other) => $this.copy().add($other);
        ($this - $other) => $this.copy().subtract($other);

        ($this == $other) => $this.x == $other.x && $this.y == $other.y;
        ($this != $other) => !($this == $other);
    }

    public function setTo(x: T, y: T): Ptr[Self] {
        this.x = x;
        this.y = y;
        return &this;
    }

    public function copyFrom(p: Ptr[Self]): Ptr[Self] {
        this.x = p.x;
        this.y = p.y;
        return &this;
    }

    public function invert(): Ptr[Self] {
        this.x = -this.x;
        this.y = -this.y;
        return &this;
    }

    public function scale(s: T): Ptr[Self] {
        this.x *= s;
        this.y *= s;
        return &this;
    }

    public function scale2(sx: T, sy: T): Ptr[Self] {
        this.x *= sx;
        this.y *= sy;
        return &this;
    }

    public function translate(x: T, y: T): Ptr[Self] {
        this.x += x;
        this.y += y;
        return &this;
    }

    public function squaredDistance(other: Ptr[Self]): T {
        var dx = this.x - other.x;
        var dy = this.y - other.y;
        return dx * dx + dy * dy;
    }

    public function distance(other: Ptr[Self]): Double {
        var dx = this.x - other.x;
        var dy = this.y - other.y;
        return sqrt(dx * dx + dy * dy);
    }

    public function eq(other: Ptr[Self]): Bool {
        return this.x == other.x && this.y == other.y;
    }

    public function normalize(size: T): Ptr[Self] {
        var normal = size / this.length;
        this.x = this.x * normal as T;
        this.y = this.y * normal as T;
        return &this;
    }

    public function perpendicular(): Ptr[Self] {
        return this.setTo(-this.y, this.x);
    }

    public function add(other: Ptr[Self]): Ptr[Self] {
        return this.add2(other.x, other.y);
    }

    public function add2(x: T, y: T): Ptr[Self] {
        return this.setTo(this.x + x, this.y + y);
    }

    public function subtract(other: Ptr[Self]): Ptr[Self] {
        return this.subtract2(other.x, other.y);
    }

    public function subtract2(x: T, y: T): Ptr[Self] {
        return this.setTo(this.x - x, this.y - y);
    }

    public function zcross(other: Ptr[Self]): Float {
        return (this.x * other.y) - (this.y * other.x);
    }

    // public function rotate(angle: T): Self {
    //     var s = sin(angle);
    //     var c = cos(angle);
    //     this.setTo(c * this.x - s * this.y, s * this.x + c * this.y);
    //     return this;
    // }

    public function dot(other: Ptr[Self]): T {
        return (this.x * other.x) + (this.y * other.y);
    }

    public function copy(): Self {
        return struct Self {x: this.x, y: this.y};
    }
}

implement Hashable for Point[Int] {
    public function hash(): Int {
        return (this.y << 16) + this.y;
    }
}

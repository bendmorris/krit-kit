// enum ActionCondition {
//     Pressed;
//     Down;
//     Released;
//     LevelGt(n: Float);
//     LevelLt(n: Float);
// }

struct InputContext {
    public var mouse: MouseInputContext = struct MouseInputContext;
    public var key: KeyInputContext = struct KeyInputContext;

    public var onUpdate: Signal1[Ptr[UpdateContext]] = null;

    var startMappings: Map[Action, Signal2[Ptr[ActionContext], Ptr[UpdateContext]]] = Map.new(0x20);
    var activeMappings: Map[Action, Signal2[Ptr[ActionContext], Ptr[UpdateContext]]] = Map.new(0x20);
    var finishMappings: Map[Action, Signal2[Ptr[ActionContext], Ptr[UpdateContext]]] = Map.new(0x20);

    var actionStates: Map[Action, Bool] = Map.new(0x20);
    var active: Map[Action, LevelData] = Map.new(0x20);

    public function onStart(action: Action, signal: Signal) {
        this.startMappings.put(action, signal);
    }

    public function on(action: Action, signal: Signal) {
        this.activeMappings.put(action, signal);
    }

    public function onFinish(action: Action, signal: Signal) {
        this.finishMappings.put(action, signal);
    }

    public function update(context: Ptr[UpdateContext]) {
        this.onUpdate.invoke(context);
        this.mouse.update(this, context);
        this.key.update(this, context);

        var actionContext: ActionContext = empty;

        // trigger any ongoing or finished actions
        for action in this.actionStates {
            var active = this.active.exists(action);
            if !active {
                if this.finishMappings.exists(action) {
                    actionContext.action = action;
                    actionContext.level = union LevelData {active: false};
                    this.finishMappings[action].invoke(actionContext, context);
                }
                this.actionStates.remove(action);
            }
        }
        // trigger any new actions
        for action in this.active {
            if this.actionStates.exists(action) {
                if this.activeMappings.exists(action) {
                    actionContext.action = action;
                    actionContext.level = this.active[action];
                    this.activeMappings[action].invoke(actionContext, context);
                }
            } else {
                this.actionStates.put(action, true);
                if this.startMappings.exists(action) {
                    actionContext.action = action;
                    actionContext.level = this.active[action];
                    this.startMappings[action].invoke(actionContext, context);
                }
            }
        }
        this.active.clear();
    }
}

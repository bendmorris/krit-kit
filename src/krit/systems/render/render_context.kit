struct RenderContext {
    public var renderer: Ptr[Renderer];
    public var renderSystem: Ptr[RenderSystem];
    public var window: Ptr[Window];
    public var camera: Ptr[Camera] = null;
    public var offset: Point = struct Point;

    public function copy(): Self {
        return struct RenderContext {
            renderer: this.renderer,
            renderSystem: this.renderSystem,
            window: this.window,
            camera: this.camera,
            offset: this.offset,
        };
    }

    public function addRect(key: Ptr[DrawKey], rect: Ptr[Rectangle[Int]], matrix: Ptr[Matrix], color: ColorWithAlpha, flexibleLayer: Bool) {
        this.transformMatrix(matrix);
        this.renderSystem.addRect(key, rect, matrix, color, flexibleLayer);
    }

    public function addTriangle(key: DrawKey, t: Ptr[Triangle], uv: Ptr[Triangle], color: ColorWithAlpha, flexibleLayer: Bool) {
        this.transformTriangle(t);
        this.renderSystem.addTriangle(key, t, uv, color, flexibleLayer);
    }

    function transformPoint(point: Ptr[Point]): Ptr[Point] {
        point.add(this.offset);
        if this.camera != null {
            this.camera.transformPoint(point);
        }
        return point;
    }

    function transformRect(rect: Ptr[Rectangle]): Ptr[Rectangle] {
        if this.camera != null {
            this.transformPoint(rect.point);
            this.camera.scaleDimensions(rect.dimensions);
        }
        return rect;
    }

    function transformTriangle(t: Ptr[Triangle]): Ptr[Triangle] {
        this.transformPoint(t.p1);
        this.transformPoint(t.p2);
        this.transformPoint(t.p3);
        return t;
    }

    function transformMatrix(m: Ptr[Matrix]): Ptr[Matrix] {
        if this.camera != null {
            this.camera.transformMatrix(m);
        }
        return m;
    }
}

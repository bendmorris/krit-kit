struct RenderSystem {
    public var calls: Vector[DrawCall];

    public static function new(allocator: Box[Allocator]) {
        return struct Self {
            calls: Vector.new(0x400),
        };
    }

    public function getDrawCall(key: Ptr[DrawKey], dims: Ptr[Triangle], flexibleLayer: Bool): Ptr[DrawCall] {
        // TODO: fallthrough logic
        // FIXME: kit bug; temp variable evaluation order in short circuited expressions
        if this.calls.length > 0 {
            var last = &this.calls.unsafeLast;
            if last.matches(key) && !last.isFull() {
                return last;
            }
        }
        var next = this.calls.grow();
        next.init(key);
        return next;
    }

    public function addTriangle(key: Ptr[DrawKey], t: Ptr[Triangle], uv: Ptr[Triangle], color: ColorWithAlpha, flexibleLayer: Bool) {
        var call = this.getDrawCall(key, t, flexibleLayer);
        call.addTriangle(t, uv, color);
    }

    public function addRect(key: Ptr[DrawKey], rect: Ptr[Rectangle[Int]], matrix: Ptr[Matrix], color: ColorWithAlpha, flexibleLayer: Bool) {
        var uvx1: RenderFloat;
        var uvy1: RenderFloat;
        var uvx2: RenderFloat;
        var uvy2: RenderFloat;
        var imageData = key.image;
        if imageData == null {
            uvx1 = uvy1 = 0;
            uvx2 = rect.width;
            uvy2 = rect.height;
        } else {
            var img = *imageData;
            uvx1 = rect.x / (img.width as Float);
            uvy1 = rect.y / (img.height as Float);
            uvx2 = (rect.x + rect.width) / (img.width as Float);
            uvy2 = (rect.y + rect.height) / (img.height as Float);
        }

        // matrix transformations
        var xa = rect.width * matrix.a + matrix.tx;
        var yb = rect.width * matrix.b + matrix.ty;
        var xc = rect.height * matrix.c + matrix.tx;
        var yd = rect.height * matrix.d + matrix.ty;

        var call = this.getDrawCall(key, struct Triangle {
            p1: struct Point {x: matrix.tx, y: matrix.ty},
            p2: struct Point {x: xa, y: yb},
            p3: struct Point {x: xc, y: yd},
        }, flexibleLayer);
        call.addTriangle(
            struct Triangle {
                p1: struct Point {x: matrix.tx, y: matrix.ty},
                p2: struct Point {x: xa, y: yb},
                p3: struct Point {x: xc, y: yd},
            },
            struct Triangle {
                p1: struct Point {x: uvx1, y: uvy1},
                p2: struct Point {x: uvx2, y: uvy1},
                p3: struct Point {x: uvx1, y: uvy2},
            },
            color
        );
        call.addTriangle(
            struct Triangle {
                p1: struct Point {x: xc, y: yd},
                p2: struct Point {x: xa, y: yb},
                p3: struct Point {x: xa + rect.height * matrix.c, y: yb + rect.height * matrix.d},
            },
            struct Triangle {
                p1: struct Point {x: uvx1, y: uvy2},
                p2: struct Point {x: uvx2, y: uvy1},
                p3: struct Point {x: uvx2, y: uvy2},
            },
            color
        );
    }

    public function clear() {
        this.calls.clear();
    }
}

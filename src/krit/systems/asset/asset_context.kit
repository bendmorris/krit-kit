struct AssetContext {
    public var cache: Ptr[AssetCache];
    var assets: Map[CString, Map[CString, Ptr[Void]]];

    public static function new(allocator: Box[Allocator], cache: Ptr[AssetCache]): Self {
        return struct Self {
            cache,
            assets: Map.new(16),
        };
    }

    public function get(type: CString, id: CString): Ptr[Void] {
        if !this.assets.exists(type) {
            this.assets[type] = Map.new(64);
        }
        match this.assets[type].get(id) {
            Some(x) => {
                return x;
            }
            default => {
                var result = this.cache.get(type, id);
                this.assets[type].put(id, result);
                return result;
            }
        }
    }

    public function getImage(id: CString): Ptr[ImageData] {
        return this.get(ImageLoader.TYPE, id) as Ptr[ImageData];
    }

    public function getBitmapFont(id: CString): Ptr[BitmapFont] {
        return this.get(BitmapFont.TYPE, id) as Ptr[BitmapFont];
    }

    public function dispose() {
        for type in this.assets {
            for id in this.assets[type] {
                this.cache.release(type, id);
            }
        }
        this.assets.free();
    }
}

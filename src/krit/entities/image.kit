struct Image {
    public var position: Point = struct Point;
    public var origin: Point = struct Point;
    public var scale: ScaleFactor = struct ScaleFactor;
    public var color: Color = Color.White;
    public var alpha: Float = 1;
    public var visible: Bool = true;
    public var blendMode: BlendMode = Alpha;
    public var angle: Float = 0;
    public var smooth: Bool = true;

    var region: ImageRegion;
    var scroll: Point = P(1, 1);

    public function centerOrigin() {
        this.origin.setTo(this.width / 2_f32, this.height / 2_f32);
    }

    rules {
        ($this.width) => $this.region.rect.width;
        ($this.height) => $this.region.rect.height;
    }
}

implement Entity for Image {
    public function render(render: Ptr[RenderContext]): Void {
        if !this.visible {
            return;
        }
        render.transform = struct RenderTransform {scroll: this.scroll};
        var matrix = struct Matrix {tx: -this.origin.x, ty: -this.origin.y};
        matrix
            .rotate(this.angle)
            .scale(this.scale.fullScaleX, this.scale.fullScaleY)
            .translate(this.position.x, this.position.y);
        var key = struct DrawKey {
            image: this.region.image,
            smooth: this.smooth,
            blend: this.blendMode
        };
        render.addRect(key, this.region.rect, matrix, this.color.withAlpha(this.alpha), false);
    }
}

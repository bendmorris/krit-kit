struct Scene {
    static var toAdd: Vector[(Ptr[Scene], Entity)] = Vector.new(256);
    static var toRemove: Vector[(Ptr[Scene], &Entity)] = Vector.new(256);

    public var bgColor: Color = Color.Black;
    public var bgAlpha: Float = 1;
    public var camera: Camera = struct Camera;
    public var shader: Ptr[SceneShader] = null;

    public var onUpdate: Signal1[Ptr[UpdateContext]] = null;
    public var postUpdate: Signal1[Ptr[UpdateContext]] = null;
    public var onRender: Signal1[Ptr[RenderContext]] = null;
    public var postRender: Signal1[Ptr[RenderContext]] = null;

    public var entities: Vector[Entity] = Vector.new(0x10000);

    var layerList: Vector[Int] = Vector.new(16);
    var layers: Map[Int, Vector[Ptr[Entity]]] = Map.new(16);

    var allocator: Box[Allocator];

    public static function new(allocator: Box[Allocator]): Self using implicit allocator {
        return struct Scene {
            allocator,
        };
    }

    public function destroy() using implicit this.allocator {
        this.entities.free();
        this.layerList.free();
        // TODO: free vectors in layers
        this.layers.free();
    }

    public function update(context: Ptr[UpdateContext]) using implicit context {
        this.onUpdate.invoke();
        for e in this.entities {
            if e.active {
                e.update();
            }
        }
        this.postUpdate.invoke();
    }

    public function add(entity: Entity) {
        Self.toAdd.push((&this, entity));
    }

    public function remove(entity: Entity) {
        Self.toRemove.push((&this, &entity));
    }

    public function render(context: Ptr[RenderContext]) {
        var childContext = context.copy();
        childContext.camera = this.camera;
        using implicit childContext {
            if this.bgAlpha > 0 {
                var key = struct DrawKey;
                context.renderSystem.addRect(key,
                    struct Rectangle[Int] {
                        point: struct Point[Int],
                        dimensions: (struct Dimensions[Int]).setTo(context.window.width, context.window.height) as Dimensions[Int],
                    },
                    struct Matrix,
                    this.bgColor.withAlpha(this.bgAlpha), false
                );
            }
            this.onRender.invoke();
            for entity in this.entities {
                entity.render();
            }
            this.postRender.invoke();
        }
    }
}

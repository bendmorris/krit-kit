// FIXME: support for Shared[Void]
abstract AssetManager: Map[CString, Ptr[Void]] {
    public static function new(allocator: Box[Allocator]) using implicit allocator {
        var map: Map[CString, Ptr[Void]] = Map.new(64);
        return map as AssetManager;
    }

    public function getImage(id: CString): Shared[ImageData] using implicit this.allocator {
        match this.get(id) {
            Some(asset) => {
                var shared = asset as Shared[ImageData];
                return shared.ref();
            }
            None => {
                var img: Shared[ImageData] = AssetLoader.loadImage(id);
                this.put(id, img as Ptr[Void]);
                return img;
            }
        }
    }

    public function releaseImage(id: CString) using implicit this.allocator {
        match this.get(id) {
            Some(asset) => {
                var shared = asset as Shared[ImageData];
                if shared.release() {
                    AssetLoader.freeImage(shared);
                    this.remove(id);
                }
            }
        }
    }
}

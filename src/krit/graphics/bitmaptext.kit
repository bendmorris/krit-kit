struct BitmapText {
    public var position: Point = struct Point;
    public var dimensions: Dimensions[Int] = struct Dimensions[Int];
    public var scale: ScaleFactor = struct ScaleFactor;
    public var color: Color = Color.White;
    public var alpha: Float = 1;
    public var visible: Bool = true;
    public var text: String;

    public static function new(source: ImageRegion, text: String, options: BitmapTextOptions): Self {
        return struct BitmapText {
            text,
        };
    }
}

enum AlignType {
    LeftAlign;
    CenterAlign;
    RightAlign;
}

struct BitmapTextOptions {
    public var font: CString;
    public var size: Int = 16;
    public var align: AlignType = LeftAlign;
    public var wordWrap: Bool = false;
}

struct FormatTagOptions {
    public var color: Option[Color];
    public var alpha: Option[Float];
    public var size: Option[Int];
    public var scale: Option[Float];
    public var font: Option[CString];
}

implement Graphic for BitmapText {
    public function render(context: Ptr[RenderContext]): Void {}
}

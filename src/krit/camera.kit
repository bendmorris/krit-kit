struct Camera {
    public var position: Point = Point.new();
    public var dimensions: Dimensions = Dimensions.new();
    public var scaleMode: Box[CameraScaleMode] = empty;
    public var scale: ScaleFactor = ScaleFactor.new();
    public var pixelSnapping: Bool = false;

    public static function new() {
        return struct Camera {};
    }

    public function update() {}

    rules {
        ($this.x) => $this.point.x;
        ($this.y) => $this.point.y;
        ($this.width) => $this.dimensions.x;
        ($this.height) => $this.dimensions.y;
    }
}

trait CameraScaleMode {
    function getScale(camera: Ptr[Camera], window: Ptr[Window]): Dimensions;
}

enum CameraType {
    DefaultStretchScaleMode;
}

implement CameraScaleMode for CameraType {
    public function getScale(camera: Ptr[Camera], window: Ptr[Window]) {
        return Dimensions.new().setTo(window.width / camera.dimensions.width, window.height / camera.dimensions.height) as Dimensions;
    }
}
